# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17xZTNu0oMUZ5XzSQuKeqU0eDCJYxppPO
"""

# pip install easyocr
#
# pip install opencv-python==4.5.4.60
#
# pip install opencv-contrib-python==4.5.4.60

from easyocr import Reader
import cv2

# loading images and resizing
img = cv2.imread('image1.jpg')
img = cv2.resize(img, (800, 600))

# making the image grayscale
grayscale = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(grayscale, (5, 5), 0)
edged = cv2.Canny(blurred, 10, 200)
cv2.waitKey(0)
cv2.destroyAllWindows()

contours, _ = cv2.findContours(edged, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = sorted(contours, key = cv2.contourArea, reverse = True)[:5]

for c in contours:
    perimeter = cv2.arcLength(c, True)
    approximation = cv2.approxPolyDP(c, 0.02 * perimeter, True)

    if len(approximation) == 4:
        number_plate_shape = approximation
        break

(x, y, w, h) = cv2.boundingRect(number_plate_shape)
number_plate = grayscale[y:y + h, x:x + w]

reader = Reader(['en'])
detection = reader.readtext(number_plate)

if len(detection) == 0:
    text = "Couldn't read the license plate"
    cv2.putText(img, text, (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 255), 3)
    cv2.waitKey(0)
else:
    cv2.drawContours(img, [number_plate_shape], -1, (255, 0, 0), 3)
    text = f"{detection[0][1]}"
    cv2.putText(img, text, (x, y - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 0, 0), 2)
    cv2.imshow('image', img)
    cv2.waitKey(0)